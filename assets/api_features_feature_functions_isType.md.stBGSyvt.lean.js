import{_ as t,c as a,a0 as r,o}from"./chunks/framework.P9qPzDnn.js";const u=JSON.parse('{"title":"Function: isType()","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/features/feature/functions/isType.md","filePath":"api/features/feature/functions/isType.md","lastUpdated":null}'),i={name:"api/features/feature/functions/isType.md"};function s(n,e,c,p,d,h){return o(),a("div",null,e[0]||(e[0]=[r('<p><a href="./../../../">Profectus</a> / <a href="./../">features/feature</a> / isType</p><h1 id="function-istype" tabindex="-1">Function: isType() <a class="header-anchor" href="#function-istype" aria-label="Permalink to &quot;Function: isType()&quot;">​</a></h1><blockquote><p><strong>isType</strong>&lt;<code>T</code>&gt;(<code>object</code>, <code>type</code>): <code>object is { type: T }</code></p></blockquote><p>Utility function for narrowing something that may or may not be a specified type of feature. Works off the principle that all features have a unique symbol to identify themselves with.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>T</strong> <em>extends</em> <code>symbol</code></p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="object" tabindex="-1">object <a class="header-anchor" href="#object" aria-label="Permalink to &quot;object&quot;">​</a></h3><p><code>unknown</code></p><p>The object to determine whether or not is of the specified type</p><h3 id="type" tabindex="-1">type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;type&quot;">​</a></h3><p><code>T</code></p><p>The symbol to look for in the object&#39;s &quot;type&quot; property</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>object is { type: T }</code></p><p>Whether or not the object is the specified type</p><h2 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h2><p><a href="https://code.incremental.social/profectus/Profectus/src/branch/main/src/features/feature.ts#L55" target="_blank" rel="noreferrer">profectus/src/features/feature.ts:55</a></p>',18)]))}const l=t(i,[["render",s]]);export{u as __pageData,l as default};
