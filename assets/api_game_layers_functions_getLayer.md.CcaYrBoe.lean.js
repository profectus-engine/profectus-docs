import{_ as a,c as r,a0 as t,o}from"./chunks/framework.P9qPzDnn.js";const f=JSON.parse('{"title":"Function: getLayer()","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/game/layers/functions/getLayer.md","filePath":"api/game/layers/functions/getLayer.md","lastUpdated":null}'),n={name:"api/game/layers/functions/getLayer.md"};function s(i,e,c,l,d,p){return o(),r("div",null,e[0]||(e[0]=[t('<p><a href="./../../../">Profectus</a> / <a href="./../">game/layers</a> / getLayer</p><h1 id="function-getlayer" tabindex="-1">Function: getLayer() <a class="header-anchor" href="#function-getlayer" aria-label="Permalink to &quot;Function: getLayer()&quot;">​</a></h1><blockquote><p><strong>getLayer</strong>&lt;<code>T</code>&gt;(<code>layerID</code>): <code>T</code></p></blockquote><p>Convenience method for getting a layer by its ID with correct typing.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>T</strong> <em>extends</em> <a href="./../interfaces/Layer"><code>Layer</code></a></p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="layerid" tabindex="-1">layerID <a class="header-anchor" href="#layerid" aria-label="Permalink to &quot;layerID&quot;">​</a></h3><p><code>string</code></p><p>The ID of the layer to get.</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>T</code></p><h2 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h2><p><a href="https://code.incremental.social/profectus/Profectus/src/branch/main/src/game/layers.tsx#L338" target="_blank" rel="noreferrer">profectus/src/game/layers.tsx:338</a></p>',14)]))}const u=a(n,[["render",s]]);export{f as __pageData,u as default};
