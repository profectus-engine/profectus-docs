import{_ as e,c as t,a0 as r,o as s}from"./chunks/framework.P9qPzDnn.js";const f=JSON.parse('{"title":"Type Alias: LayerData<T>","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/game/player/type-aliases/LayerData.md","filePath":"api/game/player/type-aliases/LayerData.md","lastUpdated":null}'),l={name:"api/game/player/type-aliases/LayerData.md"};function n(o,a,i,p,d,c){return s(),t("div",null,a[0]||(a[0]=[r('<p><a href="./../../../">Profectus</a> / <a href="./../">game/player</a> / LayerData</p><h1 id="type-alias-layerdata-t" tabindex="-1">Type Alias: LayerData&lt;T&gt; <a class="header-anchor" href="#type-alias-layerdata-t" aria-label="Permalink to &quot;Type Alias: LayerData\\&lt;T\\&gt;&quot;">​</a></h1><blockquote><p><strong>LayerData</strong>&lt;<code>T</code>&gt;: <code>{ [P in keyof T]?: T[P] extends (infer U)[] ? Record&lt;string, LayerData&lt;U&gt;&gt; : T[P] extends Record&lt;string, never&gt; ? never : T[P] extends Ref&lt;infer S&gt; ? S : T[P] extends object ? LayerData&lt;T[P]&gt; : T[P] }</code></p></blockquote><p>A layer&#39;s save data. Automatically unwraps refs.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>T</strong></p><h2 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h2><p><a href="https://code.incremental.social/profectus/Profectus/src/branch/main/src/game/player.ts#L35" target="_blank" rel="noreferrer">profectus/src/game/player.ts:35</a></p>',8)]))}const m=e(l,[["render",n]]);export{f as __pageData,m as default};
