import{_ as i,c as s,a0 as t,o as a}from"./chunks/framework.P9qPzDnn.js";const m=JSON.parse('{"title":"Requirements","description":"","frontmatter":{},"headers":[],"relativePath":"guide/important-concepts/requirements.md","filePath":"guide/important-concepts/requirements.md","lastUpdated":1737056209000}'),n={name:"guide/important-concepts/requirements.md"};function r(l,e,h,p,o,u){return a(),s("div",null,e[0]||(e[0]=[t(`<h1 id="requirements" tabindex="-1">Requirements <a class="header-anchor" href="#requirements" aria-label="Permalink to &quot;Requirements&quot;">​</a></h1><p>The requirements system in Profectus is designed to handle various conditions that must be met before certain actions or features can be accessed by the player. These conditions can include resource amounts, completed challenges, or other milestones within the game.</p><h2 id="creating-requirements" tabindex="-1">Creating Requirements <a class="header-anchor" href="#creating-requirements" aria-label="Permalink to &quot;Creating Requirements&quot;">​</a></h2><p>To create a requirement, you can use one of the provided utility functions like <a href="/api/game/requirements/functions/createCostRequirement">createCostRequirement</a>, <a href="/api/game/requirements/functions/createVisibilityRequirement">createVisibilityRequirement</a>, or <a href="/api/game/requirements/functions/createBooleanRequirement">createBooleanRequirement</a>. These functions return a <code>Requirement</code> object with specific properties that define the requirement conditions.</p><p>Cost requirements are probably the most common requirement you&#39;ll be using. For something with multiple levels, like repeatables, you&#39;ll typically want to use a formula for the cost instead of a function, and the input to the formula will be the repeatable&#39;s <code>amount</code> property. Typically that means the code will look like this:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-palenight material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#C792EA;--shiki-dark:#C792EA;">const</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;"> repeatable </span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#82AAFF;--shiki-dark:#82AAFF;"> createRepeatable</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#C792EA;--shiki-dark:#C792EA;"> =&gt;</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;"> (</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#F07178;--shiki-dark:#F07178;">    requirements</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#82AAFF;--shiki-dark:#82AAFF;"> createCostRequirement</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#C792EA;--shiki-dark:#C792EA;"> =&gt;</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;"> (</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#F07178;--shiki-dark:#F07178;">        resource</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#82AAFF;--shiki-dark:#82AAFF;"> noPersist</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">(points)</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#F07178;--shiki-dark:#F07178;">        cost</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;"> Formula</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#82AAFF;--shiki-dark:#82AAFF;">variable</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">(repeatable</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">amount)</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#82AAFF;--shiki-dark:#82AAFF;">add</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#F78C6C;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#82AAFF;--shiki-dark:#82AAFF;">times</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#F78C6C;--shiki-dark:#F78C6C;">100</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">)</span></span>
<span class="line"><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">    }</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">))</span></span>
<span class="line"><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">))</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><h2 id="using-requirements" tabindex="-1">Using Requirements <a class="header-anchor" href="#using-requirements" aria-label="Permalink to &quot;Using Requirements&quot;">​</a></h2><p>Several features will have a <code>requirements</code> property that takes one or more requirements that must be fulfilled for a certain action to be performed with that feature.</p><p>When implementing requirements, you can use the <a href="/api/game/requirements/functions/displayRequirements">displayRequirements</a> utility. This utility is designed to give a human-readable string generated by the requirement(s) given, making it easier for players to understand the conditions needed to progress in the game. Typically features that support requirements will already use this utility internally.</p><p>You may need to &quot;pay&quot; requirements upon meeting their conditions and performing the associated action. This action typically involves spending resources or making other adjustments to the game state. The <a href="/api/game/requirements/functions/payRequirements">payRequirements</a> function simplifies this process by handling the payment for one or more requirements, considering the number of levels to pay for. Additionally, custom pay functions like <a href="/api/game/requirements/functions/payByDivision">payByDivision</a> and <a href="/api/game/requirements/functions/payByReset">payByReset</a> can be passed into <code>createCostRequirement</code> for more specialized cases.</p><h2 id="multi-level-requirements" tabindex="-1">Multi-Level Requirements <a class="header-anchor" href="#multi-level-requirements" aria-label="Permalink to &quot;Multi-Level Requirements&quot;">​</a></h2><p>Requirements can have multiple &quot;levels&quot;, which are typically used for things like multi-level challenges with scaling requirements. When checking if requirements are met, the <a href="/api/game/requirements/functions/requirementsMet">requirementsMet</a> function can be used. It accepts a single requirement or an array of requirements.</p><p>Requirements that are just on/off, such as boolean or visibility requirements, will count as infinite levels when in the same array. This allows you to combine different types of requirements in the same array and use the <a href="/api/game/requirements/functions/maxRequirementsMet">maxRequirementsMet</a> function to calculate the maximum number of levels that could be acquired with the current requirement states.</p>`,13)]))}const d=i(n,[["render",r]]);export{m as __pageData,d as default};
