import{_ as o,c as t,a0 as r,o as a}from"./chunks/framework.P9qPzDnn.js";const h=JSON.parse('{"title":"Function: createConversion()","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/features/conversion/functions/createConversion.md","filePath":"api/features/conversion/functions/createConversion.md","lastUpdated":null}'),n={name:"api/features/conversion/functions/createConversion.md"};function c(s,e,i,d,u,l){return a(),t("div",null,e[0]||(e[0]=[r('<p><a href="./../../../">Profectus</a> / <a href="./../">features/conversion</a> / createConversion</p><h1 id="function-createconversion" tabindex="-1">Function: createConversion() <a class="header-anchor" href="#function-createconversion" aria-label="Permalink to &quot;Function: createConversion()&quot;">​</a></h1><blockquote><p><strong>createConversion</strong>&lt;<code>T</code>&gt;(<code>optionsFunc</code>): <code>object</code> &amp; <a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys" target="_blank" rel="noreferrer"><code>Omit</code></a>&lt;<a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys" target="_blank" rel="noreferrer"><code>Omit</code></a>&lt;<code>T</code>, <code>&quot;baseResource&quot;</code> | <code>&quot;gainResource&quot;</code> | <code>&quot;formula&quot;</code> | <code>&quot;currentGain&quot;</code> | <code>&quot;actualGain&quot;</code> | <code>&quot;currentAt&quot;</code> | <code>&quot;nextAt&quot;</code> | <code>&quot;convert&quot;</code> | <code>&quot;spend&quot;</code> | <code>&quot;buyMax&quot;</code> | <code>&quot;onConvert&quot;</code>&gt;, keyof <a href="./../interfaces/ConversionOptions"><code>ConversionOptions</code></a>&gt; &amp; <code>object</code></p></blockquote><p>Lazily creates a conversion with the given options. You typically shouldn&#39;t use this function directly. Instead use one of the other conversion constructors, which will then call this.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>T</strong> <em>extends</em> <a href="./../interfaces/ConversionOptions"><code>ConversionOptions</code></a></p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="optionsfunc" tabindex="-1">optionsFunc <a class="header-anchor" href="#optionsfunc" aria-label="Permalink to &quot;optionsFunc&quot;">​</a></h3><p>() =&gt; <code>T</code></p><p>Conversion options.</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>object</code> &amp; <a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys" target="_blank" rel="noreferrer"><code>Omit</code></a>&lt;<a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys" target="_blank" rel="noreferrer"><code>Omit</code></a>&lt;<code>T</code>, <code>&quot;baseResource&quot;</code> | <code>&quot;gainResource&quot;</code> | <code>&quot;formula&quot;</code> | <code>&quot;currentGain&quot;</code> | <code>&quot;actualGain&quot;</code> | <code>&quot;currentAt&quot;</code> | <code>&quot;nextAt&quot;</code> | <code>&quot;convert&quot;</code> | <code>&quot;spend&quot;</code> | <code>&quot;buyMax&quot;</code> | <code>&quot;onConvert&quot;</code>&gt;, keyof <a href="./../interfaces/ConversionOptions"><code>ConversionOptions</code></a>&gt; &amp; <code>object</code></p><h2 id="see" tabindex="-1">See <a class="header-anchor" href="#see" aria-label="Permalink to &quot;See&quot;">​</a></h2><ul><li><a href="./createCumulativeConversion">createCumulativeConversion</a>.</li><li><a href="./createIndependentConversion">createIndependentConversion</a>.</li></ul><h2 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h2><p><a href="https://code.incremental.social/profectus/Profectus/src/branch/main/src/features/conversion.ts#L144" target="_blank" rel="noreferrer">profectus/src/features/conversion.ts:144</a></p>',16)]))}const f=o(n,[["render",c]]);export{h as __pageData,f as default};
