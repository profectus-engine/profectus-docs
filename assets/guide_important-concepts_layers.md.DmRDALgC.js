import{_ as a,c as t,a0 as r,o}from"./chunks/framework.P9qPzDnn.js";const p=JSON.parse('{"title":"Layers","description":"","frontmatter":{},"headers":[],"relativePath":"guide/important-concepts/layers.md","filePath":"guide/important-concepts/layers.md","lastUpdated":1736993723000}'),s={name:"guide/important-concepts/layers.md"};function i(n,e,l,c,d,h){return o(),t("div",null,e[0]||(e[0]=[r('<h1 id="layers" tabindex="-1">Layers <a class="header-anchor" href="#layers" aria-label="Permalink to &quot;Layers&quot;">​</a></h1><p>Profectus content is organized into units called &quot;Layers&quot;. When displaying content to the user, the screen will be divided into several tabs that each display the content of a layer. These layers are stored in <code>/src/data/layers</code>.</p><p>Each layer is ultimately a collection of different features, and a display function. While there are a couple reserved properties for layers, most of its structure is fully up to the creator.</p><p>Layers can be dynamically added or removed at any time, which also allows for effectively disabling or enabling content based on arbitrary conditions. Just make sure <a href="./../creating-your-project/project-entry#getinitiallayers">getInitialLayers</a> can process the player save data object and determine which layers should be currently active.</p><h2 id="lazy-proxies" tabindex="-1">Lazy Proxies <a class="header-anchor" href="#lazy-proxies" aria-label="Permalink to &quot;Lazy Proxies&quot;">​</a></h2><p>Layers (and features) are not actually created immediately. Instead, their options are gotten through a function which is then run the first time something <em>inside</em> the layer is accessed. This is a concept called lazy evaluation, which is also used for things like <code>computed</code>, and allows for features to reference each other without worrying about cyclical dependencies.</p>',6)]))}const u=a(s,[["render",i]]);export{p as __pageData,u as default};
