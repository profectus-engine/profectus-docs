import{_ as a,c as t,a0 as s,o as i}from"./chunks/framework.P9qPzDnn.js";const f=JSON.parse('{"title":"Type Alias: State","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/game/persistence/type-aliases/State.md","filePath":"api/game/persistence/type-aliases/State.md","lastUpdated":null}'),o={name:"api/game/persistence/type-aliases/State.md"};function r(n,e,l,c,d,p){return i(),t("div",null,e[0]||(e[0]=[s('<p><a href="./../../../">Profectus</a> / <a href="./../">game/persistence</a> / State</p><h1 id="type-alias-state" tabindex="-1">Type Alias: State <a class="header-anchor" href="#type-alias-state" aria-label="Permalink to &quot;Type Alias: State&quot;">​</a></h1><blockquote><p><strong>State</strong>: <code>string</code> | <code>number</code> | <code>boolean</code> | <a href="./../../../util/bignum/type-aliases/DecimalSource"><code>DecimalSource</code></a> | <code>null</code> | <code>undefined</code> | {} | {}</p></blockquote><p>This is a union of things that should be safely stringifiable without needing special processes or knowing what to load them in as.</p><ul><li>Decimals aren&#39;t allowed because we&#39;d need to know to parse them back.</li><li>DecimalSources are allowed because the string is a valid value for them</li></ul><h2 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h2><p><a href="https://code.incremental.social/profectus/Profectus/src/branch/main/src/game/persistence.ts#L59" target="_blank" rel="noreferrer">profectus/src/game/persistence.ts:59</a></p>',7)]))}const h=a(o,[["render",r]]);export{f as __pageData,h as default};
