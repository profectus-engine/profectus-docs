import{_ as a,c as r,a0 as t,o as i}from"./chunks/framework.P9qPzDnn.js";const h=JSON.parse('{"title":"Function: createSequentialModifier()","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/game/modifiers/functions/createSequentialModifier.md","filePath":"api/game/modifiers/functions/createSequentialModifier.md","lastUpdated":null}'),o={name:"api/game/modifiers/functions/createSequentialModifier.md"};function n(d,e,s,c,f,l){return i(),r("div",null,e[0]||(e[0]=[t('<p><a href="./../../../">Profectus</a> / <a href="./../">game/modifiers</a> / createSequentialModifier</p><h1 id="function-createsequentialmodifier" tabindex="-1">Function: createSequentialModifier() <a class="header-anchor" href="#function-createsequentialmodifier" aria-label="Permalink to &quot;Function: createSequentialModifier()&quot;">​</a></h1><blockquote><p><strong>createSequentialModifier</strong>&lt;<code>T</code>, <code>S</code>&gt;(<code>modifiersFunc</code>): <code>S</code></p></blockquote><p>Takes an array of modifiers and applies and reverses them in order. Modifiers that are not enabled will not be applied nor reversed. Also joins their descriptions together.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>T</strong> <em>extends</em> <a href="./../interfaces/Modifier"><code>Modifier</code></a></p><p>• <strong>S</strong> = <a href="./../../../util/common/type-aliases/WithRequired"><code>WithRequired</code></a>&lt;<a href="./../interfaces/Modifier"><code>Modifier</code></a>, <a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#extracttype-union" target="_blank" rel="noreferrer"><code>Extract</code></a>&lt;<a href="./../../../util/common/type-aliases/RequiredKeys"><code>RequiredKeys</code></a>&lt;<code>T</code>&gt;, keyof <a href="./../interfaces/Modifier"><code>Modifier</code></a>&gt;&gt;</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="modifiersfunc" tabindex="-1">modifiersFunc <a class="header-anchor" href="#modifiersfunc" aria-label="Permalink to &quot;modifiersFunc&quot;">​</a></h3><p>() =&gt; <code>T</code>[]</p><p>The modifiers to perform sequentially.</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>S</code></p><h2 id="see" tabindex="-1">See <a class="header-anchor" href="#see" aria-label="Permalink to &quot;See&quot;">​</a></h2><p><a href="./createModifierSection">createModifierSection</a>.</p><h2 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h2><p><a href="https://code.incremental.social/profectus/Profectus/src/branch/main/src/game/modifiers.tsx#L248" target="_blank" rel="noreferrer">profectus/src/game/modifiers.tsx:248</a></p>',17)]))}const p=a(o,[["render",n]]);export{h as __pageData,p as default};
