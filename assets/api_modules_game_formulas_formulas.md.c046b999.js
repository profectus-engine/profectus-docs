import{_ as e,c as o,o as t,N as c}from"./chunks/framework.0799945b.js";const h=JSON.parse('{"title":"Module: game/formulas/formulas","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/modules/game/formulas/formulas.md","lastUpdated":null}'),d={name:"api/modules/game/formulas/formulas.md"},a=c('<h1 id="module-game-formulas-formulas" tabindex="-1">Module: game/formulas/formulas <a class="header-anchor" href="#module-game-formulas-formulas" aria-label="Permalink to &quot;Module: game/formulas/formulas&quot;">​</a></h1><h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><h3 id="default" tabindex="-1">default <a class="header-anchor" href="#default" aria-label="Permalink to &quot;default&quot;">​</a></h3><p>• <strong>default</strong>&lt;<code>T</code>&gt;: <code>Object</code></p><p>A class that can be used for cost/goal functions. It can be evaluated similar to a cost function, but also provides extra features for supported formulas. For example, a lot of math functions can be inverted. Typically, the use of these extra features is to support cost/goal functions that have multiple levels purchased/completed at once efficiently.</p><p><strong><code>See</code></strong></p><ul><li><a href="./formulas#calculatemaxaffordable">calculateMaxAffordable</a></li><li><a href="./../requirements#createcostrequirement">createCostRequirement</a></li></ul><h4 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">extends [<a href="./types#formulasource"><code>FormulaSource</code></a>] | <a href="./types#formulasource"><code>FormulaSource</code></a>[]</td></tr></tbody></table><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>constructor</code></td><td style="text-align:left;">&lt;T&gt;(<code>options</code>: <a href="./types#formulaoptions"><code>FormulaOptions</code></a>&lt;<code>T</code>&gt;) =&gt; <a href="./formulas#default"><code>default</code></a>&lt;<code>T</code>&gt;</td></tr><tr><td style="text-align:left;"><code>applySubstitution</code></td><td style="text-align:left;"><code>undefined</code> | <a href="./types#substitutionfunction"><code>SubstitutionFunction</code></a>&lt;<code>T</code>&gt;</td></tr><tr><td style="text-align:left;"><code>divide</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>divideBy</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>dividedBy</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>innermostVariable</code></td><td style="text-align:left;"><code>undefined</code> | <a href="./../../util/computed#processedcomputable"><code>ProcessedComputable</code></a>&lt;<a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>&gt;</td></tr><tr><td style="text-align:left;"><code>inputs</code></td><td style="text-align:left;"><code>T</code></td></tr><tr><td style="text-align:left;"><code>integralFormula</code></td><td style="text-align:left;"><code>undefined</code> | <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>internalEvaluate</code></td><td style="text-align:left;"><code>undefined</code> | <a href="./types#evaluatefunction"><code>EvaluateFunction</code></a>&lt;<code>T</code>&gt;</td></tr><tr><td style="text-align:left;"><code>internalIntegrate</code></td><td style="text-align:left;"><code>undefined</code> | <a href="./types#integratefunction"><code>IntegrateFunction</code></a>&lt;<code>T</code>&gt;</td></tr><tr><td style="text-align:left;"><code>internalIntegrateInner</code></td><td style="text-align:left;"><code>undefined</code> | <a href="./types#integratefunction"><code>IntegrateFunction</code></a>&lt;<code>T</code>&gt;</td></tr><tr><td style="text-align:left;"><code>internalInvert</code></td><td style="text-align:left;"><code>undefined</code> | <a href="./types#invertfunction"><code>InvertFunction</code></a>&lt;<code>T</code>&gt;</td></tr><tr><td style="text-align:left;"><code>internalVariables</code></td><td style="text-align:left;"><code>number</code></td></tr><tr><td style="text-align:left;"><code>logarithm</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>minus</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>multiply</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>negate</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>negated</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>plus</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>reciprocal</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>reciprocate</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>sgn</code></td><td style="text-align:left;">() =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>subtract</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>times</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>clampMax</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./formulas#default"><code>default</code></a>&lt;[<a href="./types#formulasource"><code>FormulaSource</code></a>, <a href="./types#formulasource"><code>FormulaSource</code></a>]&gt;</td></tr><tr><td style="text-align:left;"><code>clampMin</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./formulas#default"><code>default</code></a>&lt;[<a href="./types#formulasource"><code>FormulaSource</code></a>, <a href="./types#formulasource"><code>FormulaSource</code></a>]&gt;</td></tr><tr><td style="text-align:left;"><code>divide</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>divideBy</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>dividedBy</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>logarithm</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>, <code>base</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>base</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>base</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>max</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./formulas#default"><code>default</code></a>&lt;[<a href="./types#formulasource"><code>FormulaSource</code></a>, <a href="./types#formulasource"><code>FormulaSource</code></a>]&gt;</td></tr><tr><td style="text-align:left;"><code>maxabs</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./formulas#default"><code>default</code></a>&lt;[<a href="./types#formulasource"><code>FormulaSource</code></a>, <a href="./types#formulasource"><code>FormulaSource</code></a>]&gt;</td></tr><tr><td style="text-align:left;"><code>min</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./formulas#default"><code>default</code></a>&lt;[<a href="./types#formulasource"><code>FormulaSource</code></a>, <a href="./types#formulasource"><code>FormulaSource</code></a>]&gt;</td></tr><tr><td style="text-align:left;"><code>minabs</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./formulas#default"><code>default</code></a>&lt;[<a href="./types#formulasource"><code>FormulaSource</code></a>, <a href="./types#formulasource"><code>FormulaSource</code></a>]&gt;</td></tr><tr><td style="text-align:left;"><code>minus</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>multiply</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>negate</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>negated</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>plus</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>reciprocal</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>reciprocate</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>sgn</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>subtract</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>times</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>abs</code></td><td style="text-align:left;">() =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>absLog10</code></td><td style="text-align:left;">() =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>acos</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>acosh</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>add</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>asin</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>asinh</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>atan</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>atanh</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>calculateConstantOfIntegration</code></td><td style="text-align:left;">() =&gt; <a href="./../../lib/break_eternity#default"><code>default</code></a></td></tr><tr><td style="text-align:left;"><code>cbrt</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>ceil</code></td><td style="text-align:left;">() =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>clamp</code></td><td style="text-align:left;">(<code>min</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>max</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>clampMax</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./formulas#default"><code>default</code></a>&lt;[<a href="./types#formulasource"><code>FormulaSource</code></a>, <a href="./types#formulasource"><code>FormulaSource</code></a>]&gt;</td></tr><tr><td style="text-align:left;"><code>clampMin</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./formulas#default"><code>default</code></a>&lt;[<a href="./types#formulasource"><code>FormulaSource</code></a>, <a href="./types#formulasource"><code>FormulaSource</code></a>]&gt;</td></tr><tr><td style="text-align:left;"><code>conditional</code></td><td style="text-align:left;">(<code>condition</code>: <a href="./../../util/computed#computable"><code>Computable</code></a>&lt;<code>boolean</code>&gt;, <code>formulaModifier</code>: (<code>value</code>: <a href="./types#genericformula"><code>GenericFormula</code></a> &amp; { <code>invert</code>: (<code>value</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> } &amp; { <code>evaluateIntegral</code>: (<code>variable?</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> } &amp; { <code>invertIntegral</code>: (<code>value</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> }) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>cos</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>cosh</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>cube</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>div</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>equals</code></td><td style="text-align:left;">(<code>other</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>) =&gt; <code>boolean</code></td></tr><tr><td style="text-align:left;"><code>evaluate</code></td><td style="text-align:left;">(<code>variable?</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a></td></tr><tr><td style="text-align:left;"><code>evaluateIntegral</code></td><td style="text-align:left;">(<code>variable?</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a></td></tr><tr><td style="text-align:left;"><code>exp</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>factorial</code></td><td style="text-align:left;">() =&gt; <a href="./formulas#default"><code>default</code></a>&lt;[<a href="./types#formulasource"><code>FormulaSource</code></a>]&gt;</td></tr><tr><td style="text-align:left;"><code>floor</code></td><td style="text-align:left;">() =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>gamma</code></td><td style="text-align:left;">() =&gt; <a href="./formulas#default"><code>default</code></a>&lt;[<a href="./types#formulasource"><code>FormulaSource</code></a>]&gt;</td></tr><tr><td style="text-align:left;"><code>getIntegralFormula</code></td><td style="text-align:left;">(<code>stack?</code>: <a href="./types#substitutionstack"><code>SubstitutionStack</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>hasVariable</code></td><td style="text-align:left;">() =&gt; <code>boolean</code></td></tr><tr><td style="text-align:left;"><code>if</code></td><td style="text-align:left;">(<code>condition</code>: <a href="./../../util/computed#computable"><code>Computable</code></a>&lt;<code>boolean</code>&gt;, <code>formulaModifier</code>: (<code>value</code>: <a href="./types#genericformula"><code>GenericFormula</code></a> &amp; { <code>invert</code>: (<code>value</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> } &amp; { <code>evaluateIntegral</code>: (<code>variable?</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> } &amp; { <code>invertIntegral</code>: (<code>value</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> }) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>invert</code></td><td style="text-align:left;">(<code>value</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a></td></tr><tr><td style="text-align:left;"><code>invertIntegral</code></td><td style="text-align:left;">(<code>value</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a></td></tr><tr><td style="text-align:left;"><code>isIntegrable</code></td><td style="text-align:left;">() =&gt; this is IntegrableFormula</td></tr><tr><td style="text-align:left;"><code>isIntegralInvertible</code></td><td style="text-align:left;">() =&gt; this is InvertibleIntegralFormula</td></tr><tr><td style="text-align:left;"><code>isInvertible</code></td><td style="text-align:left;">() =&gt; this is InvertibleFormula</td></tr><tr><td style="text-align:left;"><code>iteratedexp</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>, <code>height?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>payload?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys" target="_blank" rel="noreferrer"><code>Omit</code></a>&lt;<code>T</code>, <code>&quot;integrate&quot;</code>&gt;(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>height?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>payload?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>iteratedlog</code></td><td style="text-align:left;">(<code>base</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>times</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>lambertw</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys" target="_blank" rel="noreferrer"><code>Omit</code></a>&lt;<code>T</code>, <code>&quot;integrate&quot;</code>&gt;(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>layeradd</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>, <code>diff</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>base?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys" target="_blank" rel="noreferrer"><code>Omit</code></a>&lt;<code>T</code>, <code>&quot;integrate&quot;</code>&gt;(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>diff</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>base?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>layeradd10</code></td><td style="text-align:left;">(<code>diff</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./formulas#default"><code>default</code></a>&lt;[<a href="./types#formulasource"><code>FormulaSource</code></a>, <a href="./types#formulasource"><code>FormulaSource</code></a>]&gt;</td></tr><tr><td style="text-align:left;"><code>ln</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>lngamma</code></td><td style="text-align:left;">() =&gt; <a href="./formulas#default"><code>default</code></a>&lt;[<a href="./types#formulasource"><code>FormulaSource</code></a>]&gt;</td></tr><tr><td style="text-align:left;"><code>log</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>log10</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>log2</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>max</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./formulas#default"><code>default</code></a>&lt;[<a href="./types#formulasource"><code>FormulaSource</code></a>, <a href="./types#formulasource"><code>FormulaSource</code></a>]&gt;</td></tr><tr><td style="text-align:left;"><code>maxabs</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./formulas#default"><code>default</code></a>&lt;[<a href="./types#formulasource"><code>FormulaSource</code></a>, <a href="./types#formulasource"><code>FormulaSource</code></a>]&gt;</td></tr><tr><td style="text-align:left;"><code>min</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./formulas#default"><code>default</code></a>&lt;[<a href="./types#formulasource"><code>FormulaSource</code></a>, <a href="./types#formulasource"><code>FormulaSource</code></a>]&gt;</td></tr><tr><td style="text-align:left;"><code>minabs</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./formulas#default"><code>default</code></a>&lt;[<a href="./types#formulasource"><code>FormulaSource</code></a>, <a href="./types#formulasource"><code>FormulaSource</code></a>]&gt;</td></tr><tr><td style="text-align:left;"><code>mul</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>neg</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>pLog10</code></td><td style="text-align:left;">() =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>pentate</code></td><td style="text-align:left;">(<code>height</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>payload</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>pow</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>pow10</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>pow_base</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>recip</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>root</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>round</code></td><td style="text-align:left;">() =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>setupConstant</code></td><td style="text-align:left;">(<code>__namedParameters</code>: { <code>inputs</code>: [<a href="./types#formulasource"><code>FormulaSource</code></a>] }) =&gt; <a href="./types#internalformulaproperties"><code>InternalFormulaProperties</code></a>&lt;<code>T</code>&gt;</td></tr><tr><td style="text-align:left;"><code>setupFormula</code></td><td style="text-align:left;">(<code>options</code>: <a href="./types#generalformulaoptions"><code>GeneralFormulaOptions</code></a>&lt;<code>T</code>&gt;) =&gt; <a href="./types#internalformulaproperties"><code>InternalFormulaProperties</code></a>&lt;<code>T</code>&gt;</td></tr><tr><td style="text-align:left;"><code>setupVariable</code></td><td style="text-align:left;">(<code>__namedParameters</code>: { <code>variable</code>: <a href="./../../util/computed#processedcomputable"><code>ProcessedComputable</code></a>&lt;<a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>&gt; }) =&gt; <a href="./types#internalformulaproperties"><code>InternalFormulaProperties</code></a>&lt;<code>T</code>&gt;</td></tr><tr><td style="text-align:left;"><code>sign</code></td><td style="text-align:left;">() =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>sin</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>sinh</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>slog</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>, <code>base?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys" target="_blank" rel="noreferrer"><code>Omit</code></a>&lt;<code>T</code>, <code>&quot;integrate&quot;</code>&gt;(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>base?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>sqr</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>sqrt</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>ssqrt</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys" target="_blank" rel="noreferrer"><code>Omit</code></a>&lt;<code>T</code>, <code>&quot;integrate&quot;</code>&gt;(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>step</code></td><td style="text-align:left;">(<code>start</code>: <a href="./../../util/computed#computable"><code>Computable</code></a>&lt;<a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>&gt;, <code>formulaModifier</code>: (<code>value</code>: <a href="./types#genericformula"><code>GenericFormula</code></a> &amp; { <code>invert</code>: (<code>value</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> } &amp; { <code>evaluateIntegral</code>: (<code>variable?</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> } &amp; { <code>invertIntegral</code>: (<code>value</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> }) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>sub</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>tan</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>tanh</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>) =&gt; <code>T</code>(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>tetrate</code></td><td style="text-align:left;">&lt;T&gt;(<code>this</code>: <code>T</code>, <code>height?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>payload?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys" target="_blank" rel="noreferrer"><code>Omit</code></a>&lt;<code>T</code>, <code>&quot;integrate&quot;</code>&gt;(<code>this</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>height?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>payload?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>trunc</code></td><td style="text-align:left;">() =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>abs</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>absLog10</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>acos</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>acosh</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>add</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>asin</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>asinh</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>atan</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>atanh</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>cbrt</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>ceil</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>clamp</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>min</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>max</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>conditional</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>condition</code>: <a href="./../../util/computed#computable"><code>Computable</code></a>&lt;<code>boolean</code>&gt;, <code>formulaModifier</code>: (<code>value</code>: <a href="./types#genericformula"><code>GenericFormula</code></a> &amp; { <code>invert</code>: (<code>value</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> } &amp; { <code>evaluateIntegral</code>: (<code>variable?</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> } &amp; { <code>invertIntegral</code>: (<code>value</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> }) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>elseFormulaModifier?</code>: (<code>value</code>: <a href="./types#genericformula"><code>GenericFormula</code></a> &amp; { <code>invert</code>: (<code>value</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> } &amp; { <code>evaluateIntegral</code>: (<code>variable?</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> } &amp; { <code>invertIntegral</code>: (<code>value</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> }) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>constant</code></td><td style="text-align:left;">(<code>value</code>: <a href="./../../util/computed#processedcomputable"><code>ProcessedComputable</code></a>&lt;<a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>&gt;) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a> &amp; { <code>invert</code>: (<code>value</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> } &amp; { <code>evaluateIntegral</code>: (<code>variable?</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> } &amp; { <code>invertIntegral</code>: (<code>value</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> }</td></tr><tr><td style="text-align:left;"><code>cos</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>cosh</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>cube</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>div</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>exp</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>factorial</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./formulas#default"><code>default</code></a>&lt;[<a href="./types#formulasource"><code>FormulaSource</code></a>]&gt;</td></tr><tr><td style="text-align:left;"><code>floor</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>gamma</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./formulas#default"><code>default</code></a>&lt;[<a href="./types#formulasource"><code>FormulaSource</code></a>]&gt;</td></tr><tr><td style="text-align:left;"><code>if</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>condition</code>: <a href="./../../util/computed#computable"><code>Computable</code></a>&lt;<code>boolean</code>&gt;, <code>formulaModifier</code>: (<code>value</code>: <a href="./types#genericformula"><code>GenericFormula</code></a> &amp; { <code>invert</code>: (<code>value</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> } &amp; { <code>evaluateIntegral</code>: (<code>variable?</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> } &amp; { <code>invertIntegral</code>: (<code>value</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> }) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a>, <code>elseFormulaModifier?</code>: (<code>value</code>: <a href="./types#genericformula"><code>GenericFormula</code></a> &amp; { <code>invert</code>: (<code>value</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> } &amp; { <code>evaluateIntegral</code>: (<code>variable?</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> } &amp; { <code>invertIntegral</code>: (<code>value</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> }) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>iteratedexp</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>, <code>height?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>payload?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys" target="_blank" rel="noreferrer"><code>Omit</code></a>&lt;<code>T</code>, <code>&quot;integrate&quot;</code>&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>height?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>payload?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>iteratedlog</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>base</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>times</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>lambertw</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys" target="_blank" rel="noreferrer"><code>Omit</code></a>&lt;<code>T</code>, <code>&quot;integrate&quot;</code>&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>layeradd</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>, <code>diff</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>base?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys" target="_blank" rel="noreferrer"><code>Omit</code></a>&lt;<code>T</code>, <code>&quot;integrate&quot;</code>&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>diff</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>base?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>layeradd10</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>diff</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./formulas#default"><code>default</code></a>&lt;[<a href="./types#formulasource"><code>FormulaSource</code></a>, <a href="./types#formulasource"><code>FormulaSource</code></a>]&gt;</td></tr><tr><td style="text-align:left;"><code>ln</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>lngamma</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./formulas#default"><code>default</code></a>&lt;[<a href="./types#formulasource"><code>FormulaSource</code></a>]&gt;</td></tr><tr><td style="text-align:left;"><code>log</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>, <code>base</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>base</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>base</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>log10</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>log2</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>mul</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>neg</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>pLog10</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>pentate</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>height</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>payload</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>pow</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>pow10</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>pow_base</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>recip</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>root</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>round</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>sign</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>sin</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>sinh</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>slog</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>, <code>base?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys" target="_blank" rel="noreferrer"><code>Omit</code></a>&lt;<code>T</code>, <code>&quot;integrate&quot;</code>&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>base?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>sqr</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>sqrt</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>ssqrt</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys" target="_blank" rel="noreferrer"><code>Omit</code></a>&lt;<code>T</code>, <code>&quot;integrate&quot;</code>&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>step</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>start</code>: <a href="./../../util/computed#computable"><code>Computable</code></a>&lt;<a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>&gt;, <code>formulaModifier</code>: (<code>value</code>: <a href="./types#genericformula"><code>GenericFormula</code></a> &amp; { <code>invert</code>: (<code>value</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> } &amp; { <code>evaluateIntegral</code>: (<code>variable?</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> } &amp; { <code>invertIntegral</code>: (<code>value</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> }) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>sub</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <code>T</code>&lt;T&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>other</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>tan</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>tanh</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>) =&gt; <code>T</code>(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>tetrate</code></td><td style="text-align:left;">&lt;T&gt;(<code>value</code>: <code>T</code>, <code>height?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>payload?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys" target="_blank" rel="noreferrer"><code>Omit</code></a>&lt;<code>T</code>, <code>&quot;integrate&quot;</code>&gt;(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>height?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>, <code>payload?</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>trunc</code></td><td style="text-align:left;">(<code>value</code>: <a href="./types#formulasource"><code>FormulaSource</code></a>) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a></td></tr><tr><td style="text-align:left;"><code>variable</code></td><td style="text-align:left;">(<code>value</code>: <a href="./../../util/computed#processedcomputable"><code>ProcessedComputable</code></a>&lt;<a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>&gt;) =&gt; <a href="./types#genericformula"><code>GenericFormula</code></a> &amp; { <code>invert</code>: (<code>value</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> } &amp; { <code>evaluateIntegral</code>: (<code>variable?</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> } &amp; { <code>invertIntegral</code>: (<code>value</code>: <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>) =&gt; <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a> }</td></tr></tbody></table><h4 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/profectus-engine/Profectus/blob/87a2d6b/src/game/formulas/formulas.ts#L46" target="_blank" rel="noreferrer">profectus/src/game/formulas/formulas.ts:46</a></p><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><h3 id="calculatecost" tabindex="-1">calculateCost <a class="header-anchor" href="#calculatecost" aria-label="Permalink to &quot;calculateCost&quot;">​</a></h3><p>▸ <strong>calculateCost</strong>(<code>formula</code>, <code>amountToBuy</code>, <code>spendResources?</code>, <code>summedPurchases?</code>): <a href="./../../util/bignum#decimalsource"><code>DecimalSource</code></a></p><p>Utility for calculating the cost of a formula for a given amount of purchases. If spendResources is changed to false, the calculation will be much faster with higher numbers.</p><h5 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>formula</code></td><td style="text-align:left;"><a href="./types#invertibleformula"><code>InvertibleFormula</code></a></td><td style="text-align:left;">The formula to use for calculating buy max from</td></tr><tr><td style="text-align:left;"><code>amountToBuy</code></td><td style="text-align:left;"><a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a></td><td style="text-align:left;">The amount of purchases to calculate the cost for</td></tr><tr><td style="text-align:left;"><code>spendResources?</code></td><td style="text-align:left;"><code>true</code></td><td style="text-align:left;">Whether or not to count spent resources on each purchase or not. If true, costs will be approximated for performance, skewing towards higher cost</td></tr><tr><td style="text-align:left;"><code>summedPurchases?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">How many purchases to manually sum for improved accuracy. If not specified, defaults to 10 when spending resources and 0 when not</td></tr></tbody></table><h5 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><a href="./../../util/bignum#decimalsource"><code>DecimalSource</code></a></p><h4 id="other-signatures" tabindex="-1">Other signatures <a class="header-anchor" href="#other-signatures" aria-label="Permalink to &quot;Other signatures&quot;">​</a></h4><p>▸ <strong>calculateCost</strong>(<code>formula</code>, <code>amountToBuy</code>, <code>spendResources</code>, <code>summedPurchases?</code>): <a href="./../../util/bignum#decimalsource"><code>DecimalSource</code></a></p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>formula</code></td><td style="text-align:left;"><a href="./types#invertibleintegralformula"><code>InvertibleIntegralFormula</code></a></td></tr><tr><td style="text-align:left;"><code>amountToBuy</code></td><td style="text-align:left;"><a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a></td></tr><tr><td style="text-align:left;"><code>spendResources</code></td><td style="text-align:left;"><code>boolean</code></td></tr><tr><td style="text-align:left;"><code>summedPurchases?</code></td><td style="text-align:left;"><code>number</code></td></tr></tbody></table><h4 id="defined-in-1" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-1" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/profectus-engine/Profectus/blob/87a2d6b/src/game/formulas/formulas.ts#L1455" target="_blank" rel="noreferrer">profectus/src/game/formulas/formulas.ts:1455</a></p><p><a href="https://github.com/profectus-engine/Profectus/blob/87a2d6b/src/game/formulas/formulas.ts#L1461" target="_blank" rel="noreferrer">profectus/src/game/formulas/formulas.ts:1461</a></p><p><a href="https://github.com/profectus-engine/Profectus/blob/87a2d6b/src/game/formulas/formulas.ts#L1467" target="_blank" rel="noreferrer">profectus/src/game/formulas/formulas.ts:1467</a></p><hr><h3 id="calculatemaxaffordable" tabindex="-1">calculateMaxAffordable <a class="header-anchor" href="#calculatemaxaffordable" aria-label="Permalink to &quot;calculateMaxAffordable&quot;">​</a></h3><p>▸ <strong>calculateMaxAffordable</strong>(<code>formula</code>, <code>resource</code>, <code>spendResources?</code>, <code>summedPurchases?</code>): <code>ComputedRef</code>&lt;<a href="./../../util/bignum#decimalsource"><code>DecimalSource</code></a>&gt;</p><p>Utility for calculating the maximum amount of purchases possible with a given formula and resource. If spendResources is changed to false, the calculation will be much faster with higher numbers.</p><h5 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>formula</code></td><td style="text-align:left;"><a href="./types#invertibleformula"><code>InvertibleFormula</code></a></td><td style="text-align:left;">The formula to use for calculating buy max from</td></tr><tr><td style="text-align:left;"><code>resource</code></td><td style="text-align:left;"><a href="./../../features/resource#resource"><code>Resource</code></a>&lt;<a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>&gt;</td><td style="text-align:left;">The resource used when purchasing (is only read from)</td></tr><tr><td style="text-align:left;"><code>spendResources?</code></td><td style="text-align:left;"><code>true</code></td><td style="text-align:left;">Whether or not to count spent resources on each purchase or not. If true, costs will be approximated for performance, skewing towards fewer purchases</td></tr><tr><td style="text-align:left;"><code>summedPurchases?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">How many of the most expensive purchases should be manually summed for better accuracy. If unspecified uses 10 when spending resources and 0 when not</td></tr></tbody></table><h5 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>ComputedRef</code>&lt;<a href="./../../util/bignum#decimalsource"><code>DecimalSource</code></a>&gt;</p><h4 id="other-signatures-1" tabindex="-1">Other signatures <a class="header-anchor" href="#other-signatures-1" aria-label="Permalink to &quot;Other signatures&quot;">​</a></h4><p>▸ <strong>calculateMaxAffordable</strong>(<code>formula</code>, <code>resource</code>, <code>spendResources</code>, <code>summedPurchases?</code>): <code>ComputedRef</code>&lt;<a href="./../../util/bignum#decimalsource"><code>DecimalSource</code></a>&gt;</p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>formula</code></td><td style="text-align:left;"><a href="./types#invertibleintegralformula"><code>InvertibleIntegralFormula</code></a></td></tr><tr><td style="text-align:left;"><code>resource</code></td><td style="text-align:left;"><a href="./../../features/resource#resource"><code>Resource</code></a>&lt;<a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a>&gt;</td></tr><tr><td style="text-align:left;"><code>spendResources</code></td><td style="text-align:left;"><a href="./../../util/computed#computable"><code>Computable</code></a>&lt;<code>boolean</code>&gt;</td></tr><tr><td style="text-align:left;"><code>summedPurchases?</code></td><td style="text-align:left;"><code>number</code></td></tr></tbody></table><h4 id="defined-in-2" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-2" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/profectus-engine/Profectus/blob/87a2d6b/src/game/formulas/formulas.ts#L1387" target="_blank" rel="noreferrer">profectus/src/game/formulas/formulas.ts:1387</a></p><p><a href="https://github.com/profectus-engine/Profectus/blob/87a2d6b/src/game/formulas/formulas.ts#L1393" target="_blank" rel="noreferrer">profectus/src/game/formulas/formulas.ts:1393</a></p><p><a href="https://github.com/profectus-engine/Profectus/blob/87a2d6b/src/game/formulas/formulas.ts#L1399" target="_blank" rel="noreferrer">profectus/src/game/formulas/formulas.ts:1399</a></p><hr><h3 id="findnoninvertible" tabindex="-1">findNonInvertible <a class="header-anchor" href="#findnoninvertible" aria-label="Permalink to &quot;findNonInvertible&quot;">​</a></h3><p>▸ <strong>findNonInvertible</strong>(<code>formula</code>): <a href="./types#genericformula"><code>GenericFormula</code></a> | <code>null</code></p><p>Utility for recursively searching through a formula for the cause of non-invertibility.</p><h5 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>formula</code></td><td style="text-align:left;"><a href="./types#genericformula"><code>GenericFormula</code></a></td><td style="text-align:left;">The formula to search for a non-invertible formula within</td></tr></tbody></table><h5 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><a href="./types#genericformula"><code>GenericFormula</code></a> | <code>null</code></p><h4 id="defined-in-3" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-3" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/profectus-engine/Profectus/blob/87a2d6b/src/game/formulas/formulas.ts#L1344" target="_blank" rel="noreferrer">profectus/src/game/formulas/formulas.ts:1344</a></p><hr><h3 id="hasvariable" tabindex="-1">hasVariable <a class="header-anchor" href="#hasvariable" aria-label="Permalink to &quot;hasVariable&quot;">​</a></h3><p>▸ <strong>hasVariable</strong>(<code>value</code>): value is InvertibleFormula</p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>value</code></td><td style="text-align:left;"><a href="./types#formulasource"><code>FormulaSource</code></a></td></tr></tbody></table><h4 id="defined-in-4" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-4" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/profectus-engine/Profectus/blob/87a2d6b/src/game/formulas/formulas.ts#L24" target="_blank" rel="noreferrer">profectus/src/game/formulas/formulas.ts:24</a></p><hr><h3 id="printformula" tabindex="-1">printFormula <a class="header-anchor" href="#printformula" aria-label="Permalink to &quot;printFormula&quot;">​</a></h3><p>▸ <strong>printFormula</strong>(<code>formula</code>): <code>string</code></p><p>Stringifies a formula so it&#39;s more easy to read in the console</p><h5 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>formula</code></td><td style="text-align:left;"><a href="./types#formulasource"><code>FormulaSource</code></a></td><td style="text-align:left;">The formula to print</td></tr></tbody></table><h5 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>string</code></p><h4 id="defined-in-5" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-5" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/profectus-engine/Profectus/blob/87a2d6b/src/game/formulas/formulas.ts#L1362" target="_blank" rel="noreferrer">profectus/src/game/formulas/formulas.ts:1362</a></p><hr><h3 id="unrefformulasource" tabindex="-1">unrefFormulaSource <a class="header-anchor" href="#unrefformulasource" aria-label="Permalink to &quot;unrefFormulaSource&quot;">​</a></h3><p>▸ <strong>unrefFormulaSource</strong>(<code>value</code>, <code>variable?</code>): <a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a></p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>value</code></td><td style="text-align:left;"><a href="./types#formulasource"><code>FormulaSource</code></a></td></tr><tr><td style="text-align:left;"><code>variable?</code></td><td style="text-align:left;"><a href="./../../lib/break_eternity#decimalsource"><code>DecimalSource</code></a></td></tr></tbody></table><h4 id="defined-in-6" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-6" aria-label="Permalink to &quot;Defined in&quot;">​</a></h4><p><a href="https://github.com/profectus-engine/Profectus/blob/87a2d6b/src/game/formulas/formulas.ts#L28" target="_blank" rel="noreferrer">profectus/src/game/formulas/formulas.ts:28</a></p>',74),r=[a];function l(u,s,f,i,m,n){return t(),o("div",null,r)}const y=e(d,[["render",l]]);export{h as __pageData,y as default};
