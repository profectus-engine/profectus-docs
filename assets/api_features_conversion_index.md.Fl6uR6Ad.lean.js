import{_ as i,c as a,a0 as e,o as t}from"./chunks/framework.P9qPzDnn.js";const F=JSON.parse('{"title":"features/conversion","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/features/conversion/index.md","filePath":"api/features/conversion/index.md","lastUpdated":null}'),n={name:"api/features/conversion/index.md"};function h(l,s,r,p,o,k){return t(),a("div",null,s[0]||(s[0]=[e(`<p><a href="./../../">Profectus</a> / features/conversion</p><h1 id="features-conversion" tabindex="-1">features/conversion <a class="header-anchor" href="#features-conversion" aria-label="Permalink to &quot;features/conversion&quot;">​</a></h1><p>This feature represents an exchange of resources based on a formula (any kind, not just a constant exchange rate). This can also handle cases where exchange is continuously produced or without actually spending the input currency. The formula works by including a function that takes the input resource as a Formula variable, and performing any mathematical operations necessary to map that variable to the output amount.</p><p>The default type of conversion is a &quot;cumulative conversion&quot;, which means the amount of the output resource gets added onto the current amount of that resource. That is, it accumulates.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-palenight material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#C792EA;--shiki-dark:#C792EA;">const</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;"> conversion </span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#82AAFF;--shiki-dark:#82AAFF;"> createConversion</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#C792EA;--shiki-dark:#C792EA;"> =&gt;</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;"> (</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#F07178;--shiki-dark:#F07178;">    baseResource</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#82AAFF;--shiki-dark:#82AAFF;"> noPersist</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">(points)</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#F07178;--shiki-dark:#F07178;">    gainResource</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#82AAFF;--shiki-dark:#82AAFF;"> noPersist</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">(prestigePoints)</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#82AAFF;--shiki-dark:#82AAFF;">    formula</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#BABED8;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#C792EA;--shiki-dark:#C792EA;"> =&gt;</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;"> x</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#82AAFF;--shiki-dark:#82AAFF;">log10</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">()</span></span>
<span class="line"><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">))</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><p>You can use the <code>setupPassiveGeneration</code> utility to auto-convert the resources. A third parameter can be added for the rate (where 1 is the <code>currentGain</code> every second) so it can be based off an upgrade, a toggle, how much of a repeatable you&#39;ve bought, etc.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-palenight material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#82AAFF;--shiki-dark:#82AAFF;">setupPassiveGeneration</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">(layer</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;"> conversion)</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><p>In addition to the default, there is an &quot;independent conversion&quot;, which just <em>sets</em> the amount of the output resource irrespective of how much was already there. This is similar to how a leveling system might work, where whenever experience is gained you can &quot;convert&quot; that exp amount into a level amount (without spending the experience, of courese).</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-palenight material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#C792EA;--shiki-dark:#C792EA;">const</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;"> conversion </span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#82AAFF;--shiki-dark:#82AAFF;"> createIndependentConversion</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#C792EA;--shiki-dark:#C792EA;"> =&gt;</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;"> (</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#F07178;--shiki-dark:#F07178;">    baseResource</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#82AAFF;--shiki-dark:#82AAFF;"> noPersist</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">(exp)</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#F07178;--shiki-dark:#F07178;">    gainResource</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#82AAFF;--shiki-dark:#82AAFF;"> noPersist</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">(levels)</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#82AAFF;--shiki-dark:#82AAFF;">    formula</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#BABED8;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#C792EA;--shiki-dark:#C792EA;"> =&gt;</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;"> x</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#82AAFF;--shiki-dark:#82AAFF;">log10</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#82AAFF;--shiki-dark:#82AAFF;">    spend</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;"> ()</span><span style="--shiki-light:#C792EA;--shiki-dark:#C792EA;"> =&gt;</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;"> {}</span><span style="--shiki-light:#676E95;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // no-op</span></span>
<span class="line"><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">))</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><p>For independent conversions, you can make them &quot;automatic&quot; without the use of the utility by just calling <code>convert</code> whenever the base resource changes, like this:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-palenight material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#82AAFF;--shiki-dark:#82AAFF;">watch</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">(exp</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;"> conversion</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#BABED8;--shiki-dark:#BABED8;">convert)</span><span style="--shiki-light:#89DDFF;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><p>The advantage to doing it this way over just a <code>computed</code> property mapping experience to levels, is that conversions will expose information about how much of the base resource is required for the output to go up.</p><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;Index&quot;">​</a></h2><h3 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h3><ul><li><a href="./interfaces/Conversion">Conversion</a></li><li><a href="./interfaces/ConversionOptions">ConversionOptions</a></li></ul><h3 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h3><ul><li><a href="./variables/ConversionType">ConversionType</a></li></ul><h3 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h3><ul><li><a href="./functions/createCanConvertRequirement">createCanConvertRequirement</a></li><li><a href="./functions/createConversion">createConversion</a></li><li><a href="./functions/createCumulativeConversion">createCumulativeConversion</a></li><li><a href="./functions/createIndependentConversion">createIndependentConversion</a></li><li><a href="./functions/setupPassiveGeneration">setupPassiveGeneration</a></li></ul>`,19)]))}const c=i(n,[["render",h]]);export{F as __pageData,c as default};
