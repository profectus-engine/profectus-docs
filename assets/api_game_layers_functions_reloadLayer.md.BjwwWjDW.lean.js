import{_ as a,c as r,a0 as t,o}from"./chunks/framework.P9qPzDnn.js";const h=JSON.parse('{"title":"Function: reloadLayer()","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/game/layers/functions/reloadLayer.md","filePath":"api/game/layers/functions/reloadLayer.md","lastUpdated":null}'),n={name:"api/game/layers/functions/reloadLayer.md"};function i(l,e,s,d,c,f){return o(),r("div",null,e[0]||(e[0]=[t('<p><a href="./../../../">Profectus</a> / <a href="./../">game/layers</a> / reloadLayer</p><h1 id="function-reloadlayer" tabindex="-1">Function: reloadLayer() <a class="header-anchor" href="#function-reloadlayer" aria-label="Permalink to &quot;Function: reloadLayer()&quot;">​</a></h1><blockquote><p><strong>reloadLayer</strong>(<code>layer</code>): <code>void</code></p></blockquote><p>Convenience method for removing and immediately re-adding a layer. This is useful for layers with dynamic content, to ensure persistent refs are correctly configured.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="layer" tabindex="-1">layer <a class="header-anchor" href="#layer" aria-label="Permalink to &quot;layer&quot;">​</a></h3><p><a href="./../interfaces/Layer"><code>Layer</code></a></p><p>Layer to remove and then re-add</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>void</code></p><h2 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h2><p><a href="https://code.incremental.social/profectus/Profectus/src/branch/main/src/game/layers.tsx#L359" target="_blank" rel="noreferrer">profectus/src/game/layers.tsx:359</a></p>',12)]))}const p=a(n,[["render",i]]);export{h as __pageData,p as default};
